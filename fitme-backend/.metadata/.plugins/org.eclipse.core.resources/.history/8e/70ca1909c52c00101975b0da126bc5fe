package com.fitme.backend.controller;

import com.fitme.backend.config.JwtUtil;
import com.fitme.backend.model.User;
import com.fitme.backend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class UserController {

    @Autowired
    private UserService userService;package com.code.api.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.code.api.models.Users;
import com.code.api.services.IUsersService;

@RestController
@RequestMapping("api/users/")
public class UsersController {
//add the dependency
	@Autowired
	IUsersService userService;
	//root path
	@GetMapping(value="/")
	public List<Users> getAllUsers()
	{
		return userService.getAll();
	}
	@GetMapping(value="/{id}")
	public Users getUsersById(@PathVariable("id") int id)
	{
		return userService.getUserById(id);
	}
	@PostMapping(value="login")
	public Users userLogin(@RequestParam("emailid") String emailid,
			@RequestParam("password") String password)
	{
		return userService.validateUsers(emailid, password);
	}
	@PostMapping(value="create")
	public Users userCreate(@RequestBody Users users)
	{
		return userService.createUsers(users);
	}
	@PutMapping(value="edit")
	public Users userEdit(@RequestBody Users users)
	{
		return userService.updateUsers(users);
	}
	@DeleteMapping(value="delete/{id}")
	public String userDelete(@PathVariable("id") int id)
	{
		return userService.deleteUsers(id);
	}
	
}


    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtUtil;
    
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handleIllegalArgument(IllegalArgumentException e) {
        return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
    }

    @PostMapping("/register")
    public ResponseEntity<String> registerUser(@RequestBody User user) {
        userService.registerUser(user);
        return ResponseEntity.ok("User registered successfully!");
    }

    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> authenticateUser(@RequestBody User user) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                    user.getEmail(), user.getPassword()
                )
            );
            SecurityContextHolder.getContext().setAuthentication(authentication);

            String username = authentication.getName();
            String token = jwtUtil.generateToken(username);

            Map<String, String> response = new HashMap<>();
            response.put("message", "User logged in successfully!");
            response.put("token", token);

            return ResponseEntity.ok(response);
        } catch (BadCredentialsException e) {
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Invalid email or password");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        } catch (Exception e) {
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Authentication failed: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    

    @PostMapping("/logout")
    public ResponseEntity<String> logoutUser(@RequestHeader("Authorization") String token) {
        try {
            if (token == null || !token.startsWith("Bearer ")) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Please login first");
            }

            // Extract token (remove "Bearer " prefix)
            String jwtToken = token.substring(7);

            // Validate token
            if (jwtUtil.validateToken(jwtToken)) {
                // Clear the security context to log out the user
                SecurityContextHolder.clearContext();
                return ResponseEntity.ok("User logged out successfully!");
            } else {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired token");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error logging out: " + e.getMessage());
        }
    }
    
    


}
