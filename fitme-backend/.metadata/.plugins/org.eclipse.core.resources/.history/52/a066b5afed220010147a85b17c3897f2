package com.fitme.backend.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtil {

    private final String SECRET_KEY = "8f9sdf9sdf9sdf9sdf9sdf9sdf9sdf9sdf"; // Secure, random key (change for production)

    // Generate JWT token based on the username
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)  // Set the username as the subject
                .setIssuedAt(new Date())  // Set the issue time
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))  // 10 hours expiry time
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)  // Use HS256 algorithm for signing
                .compact();  // Build the JWT token
    }

    // Extract username from the token
    public String extractUsername(String token) {
        return extractAllClaims(token).getSubject();  // Extract the subject (username) from claims
    }

    // Validate the token by checking the username and expiration
    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    // Check if the token is expired
    private boolean isTokenExpired(String token) {
        return extractAllClaims(token).getExpiration().before(new Date());  // Check expiration date
    }

    // Extract all claims from the token
    private Claims extractAllClaims(String token) {
        return Jwts.parser()  // Use the parser method for older versions
                .setSigningKey(SECRET_KEY)  // Set the signing key
                .parseClaimsJws(token)  // Parse the JWT and get the claims
                .getBody();  // Return the body of the claims
    }

    // Check if the token is expired (Helper method)
    public boolean isTokenExpiredHelper(String token) {
        return extractAllClaims(token).getExpiration().before(new Date());
    }
}
